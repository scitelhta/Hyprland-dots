$bar-spacing: $spacing / 2;
$button-radius: if($bar-style == 'floating', max(0, $radii - $bar-spacing), $radii);

@mixin panel-button($flat: $bar-flat-buttons, $reactive: true){
    @include unset;

    @if $bar-style == 'separated' {
        transition: $transition;

        > * {
            @include floating-widget;
            border-radius: $radii;
            margin: $wm-gaps $bar-spacing;
            transition: $transition;
        }

        &:hover > * {
            color: $hover-fg;

            @if $drop-shadow {
                box-shadow: 0 0 min(6px, $spacing/2) 0 $shadow,
                    inset 0 0 0 99px $hover;
            } @else {
                box-shadow: inset 0 0 0 99px $hover;
            }
        }

        &:active > *, &.active > * {
            label, image { color: $red; }// $accent-fg; }
            background-image: $active-gradient;
            background-color: $accent;
        }
    } @else {
        @include accs-button($flat, $reactive);

        > * {
            border-radius: $button-radius;
         //   margin: $bar-spacing;
            margin: 0;
        }
    }

    label, image {
        font-weight: normal;
    }

    > * {
        padding: 0;
       // padding: $padding * 0.4 $padding * 0.8;
    }
}

.panel {
    @if $bar-style == 'normal' {
        //background-color: $bg-color;
        background: rgba(0,0,0,0);

    }

    @if not $screen-corners and $bar-style == 'normal' {
        @if $bar-position == 'bottom' {
            border-top: $border;
        } @else {
            border-bottom: $border;
        }
    }

    @if $bar-style == 'floating' {
        @include floating-widget;
        border-radius: $radii;
        margin: $wm-gaps;
        padding: 0;
    }

    @if $bar-style == 'separated' {
        > .end > button:last-child > * {
            margin-right: $wm-gaps;
        }

        > .start > button:first-child > * {
            margin-left: $wm-gaps;
        }
    }

    .panel-button {
        @include panel-button;
    }

    .tray-item, .color-picker {
        @include panel-button($flat: true);
    }

    separator {
        background-color: transparentize($fg-color, 0.86);
        border-radius: $radii;
        min-height: 5px;
        min-width: 5px;
    }

    .overview {
        label { color: transparentize($accent, 0.2); }
        &:hover label { color: $accent; }
        &:active label, &.active label { color: $accent-fg; }
    }


    .powermenu, .recorder {
        image { color: transparentize($red, 0.3); }
        &:hover image { color: transparentize($red, 0.15); }
        &:active image { color: $red; }
    }

    .focused-client > box > box,
    .quicksettings > box > box {
        @include spacing($spacing: if($bar-spacing == 0, $padding / 2, $bar-spacing));
    }

    /* stylelint-disable-next-line selector-not-notation */
    .quicksettings:not(.active):not(:active) {
        .bluetooth { color: $blue; }

        .battery {
            &.low { color: $red; }
            &.charged, &.charging { color: $green; }
        }
    }

    .tclock {
        font-size: 1.6em;
    }


    .media {
        &.spotify image { color: $green; }
        &.firefox image { color: $orange; }
        &.mpv image { color: $magenta; }
    }

    .notifications {
        image { color: $yellow; }
    }

    .battery-bar {
        .font-icon { font-size: 1.15em; }

        @if $battery-bar-full {
            > box { padding: 0; }
        }

        image, .font-icon {
            margin-right: $bar-spacing * .5;
        }

        levelbar trough {
            @include widget;
            min-width: 20px;//$battery-bar-width;
            min-height: $battery-bar-height;

            block.filled {
                border-radius: max($radii - $border-width, 0);
                background-image: $active-gradient;
            }
        }

        @mixin color($color) {
            image, label { color: $color }

            block.filled {
                background-image: linear-gradient(to right, $color, lighten($color, 6%));
            }
        }

        .medium { @include color($yellow) }
        .low { @include color($red) }
        .charging { @include color($green) }
        &:active { @include color($accent-fg) }

        .whole-button {
            label {
                color: $fg-color;
                text-shadow: $text-shadow;
            }

            trough, block.filled {
                border-radius: $button-radius;
            }

            @if $bar-style == 'separated' {
                trough { border: none; }
            }
        }
    }

    .cosa {
        background: linear-gradient(to right,  rgba(#1a0033, 0.8) 30%,  rgba(#003300,0.6) 50%,  rgba(#000066,0.8) 100%);
        border: 1px white;
        border-radius: 10px;
        box-shadow: 2px 2px 2px  rgba(#ffffff,0.3);
    }

    .icono {
        padding-left: 5px;
    }

    .workspaces button {
        all: unset;

        .rindicator {
            font-weight: normal;

            min-width: 28px;
            min-height: 28px;
         //   border-radius: $radii*0.6;
            box-shadow: inset 0 0 0 $border-width $border-color;
            padding: 0 $padding/2;
            transition: $transition/2;


         //   background-color: transparentize($fg-color, 0.8);
        }

        &.occupied.mine .rindicator {
         //   background-color: transparentize($white, 0.2);
            font-weight: bold;
            min-width: 10px;
            min-height: 10px;

        }

        &.anmine.unoccupied .rindicator {
            background-color: rgba(255,255,255, 0.2);
            min-width: 10px;
            min-height: 10px;

        }


        &.active .rindicator, &:active .rindicator {
            background-color: $accent;
            box-shadow: inset 0 0 0 10px transparentize($fg-color, 0.8);
            border: 2px solid red;
          //  font-weight: bold;
           // color: $red;
        }

        &.active .rindicator {
            min-width: 24px;
            min-height: 16px;
            border: 2px solid $red;
        }

          &.active.mine .rindicator {
              color: $red;
          }



        &:hover .rindicator {
            box-shadow: inset 0 0 0 10px transparentize($fg-color, 0.8);
            color: $green;
        }
    }
}
